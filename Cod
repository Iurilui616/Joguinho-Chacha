   <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåå Cosmic Symphony Pro üåå</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow: hidden;
            background: linear-gradient(135deg, #1e1b4b, #581c87, #be185d);
            height: 100vh;
            position: relative;
        }

        .container {
            position: relative;
            width: 100vw;
            height: 100vh;
            cursor: crosshair;
        }

        .stars {
            position: absolute;
            inset: 0;
            pointer-events: none;
        }

        .star {
            position: absolute;
            background: white;
            border-radius: 50%;
            transition: opacity 0.1s ease;
        }

        .particle {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            transition: all 0.1s ease;
        }

        .trail-point {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            filter: blur(1px);
        }

        .card {
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(16px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 16px;
            color: white;
        }

        .button {
            background: linear-gradient(135deg, #8b5cf6, #ec4899);
            border: none;
            border-radius: 8px;
            padding: 12px 16px;
            color: white;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .button:hover {
            background: linear-gradient(135deg, #7c3aed, #db2777);
            transform: translateY(-1px);
        }

        .button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .button-outline {
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .button-outline:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .button-destructive {
            background: #dc2626;
        }

        .button-destructive:hover {
            background: #b91c1c;
        }

        .controls {
            position: absolute;
            top: 16px;
            left: 16px;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .main-controls {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            font-size: 14px;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .settings-panel {
            width: 320px;
            display: none;
        }

        .settings-panel.show {
            display: block;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .select {
            width: 100%;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 8px 12px;
            color: white;
            font-size: 14px;
        }

        .select option {
            background: #1f2937;
            color: white;
        }

        .slider-container {
            position: relative;
            width: 100%;
            height: 20px;
            margin: 8px 0;
        }

        .slider {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            outline: none;
            -webkit-appearance: none;
            appearance: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #8b5cf6;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid white;
        }

        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #8b5cf6;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid white;
        }

        .instructions {
            position: absolute;
            bottom: 16px;
            left: 16px;
            right: 16px;
            z-index: 10;
            text-align: center;
        }

        .instructions h2 {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #a78bfa, #f472b6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .instructions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 16px;
            font-size: 14px;
            opacity: 0.9;
        }

        .instructions-item h3 {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .mouse-glow {
            position: absolute;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            pointer-events: none;
            filter: blur(40px);
            transition: all 0.5s ease;
            opacity: 0;
        }

        .recording-indicator {
            position: absolute;
            top: 16px;
            right: 16px;
            z-index: 10;
        }

        .recording-dot {
            width: 12px;
            height: 12px;
            background: #dc2626;
            border-radius: 50%;
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
        }

        @keyframes particlePulse {
            0%, 100% { transform: translate(-50%, -50%) scale(1); }
            50% { transform: translate(-50%, -50%) scale(1.3); }
        }

        .particle-main {
            animation: particlePulse 1s ease-in-out infinite alternate;
        }

        .icon {
            width: 16px;
            height: 16px;
            display: inline-block;
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="container" id="gameContainer">
        <!-- Estrelas de fundo -->
        <div class="stars" id="starsContainer"></div>

        <!-- Part√≠culas -->
        <div id="particlesContainer"></div>

        <div class="controls">
            <div class="card">
                <div class="main-controls">
                    <button class="button" id="playBtn">
                        <span id="playIcon">‚ñ∂Ô∏è</span>
                    </button>
                    <button class="button button-outline" id="recordBtn">
                        <span>üé§</span>
                    </button>
                    <button class="button button-outline" id="replayBtn" disabled>
                        <span>‚ñ∂Ô∏è</span> Replay
                    </button>
                    <button class="button button-outline" id="resetBtn">
                        <span>üîÑ</span>
                    </button>
                    <button class="button button-outline" id="settingsBtn">
                        <span>‚öôÔ∏è</span>
                    </button>
                </div>

                <div class="stats-grid">
                    <div class="stat-item">
                        <span>üéµ</span>
                        <span>Pontua√ß√£o: <span id="scoreValue">0</span></span>
                    </div>
                    <div class="stat-item">
                        <span>üåä</span>
                        <span>Harmonia: <span id="harmonyValue">0</span>%</span>
                    </div>
                    <div class="stat-item">
                        <span>‚ö°</span>
                        <span>Part√≠culas: <span id="particlesValue">0</span></span>
                    </div>
                    <div class="stat-item">
                        <span>üé§</span>
                        <span>Gravadas: <span id="recordedValue">0</span></span>
                    </div>
                </div>
            </div>

            <div class="card settings-panel" id="settingsPanel">
                <div class="form-group">
                    <label class="form-label">Escala Musical</label>
                    <select class="select" id="scaleSelect">
                        <option value="pentatonic">Pentat√¥nica</option>
                        <option value="major">Maior</option>
                        <option value="minor">Menor</option>
                        <option value="blues">Blues</option>
                        <option value="chromatic">Crom√°tica</option>
                        <option value="dorian">D√≥rico</option>
                        <option value="mixolydian">Mixol√≠dio</option>
                        <option value="harmonic">Menor Harm√¥nico</option>
                        <option value="japanese">Japonesa</option>
                        <option value="arabic">√Årabe</option>
                        <option value="indian">Indiana (Raga)</option>
                        <option value="gypsy">Cigana</option>
                        <option value="whole">Tons Inteiros</option>
                        <option value="diminished">Diminuta</option>
                        <option value="byzantine">Bizantina</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Instrumento</label>
                    <select class="select" id="instrumentSelect">
                        <option value="sine">Sine Wave</option>
                        <option value="square">Square Wave</option>
                        <option value="sawtooth">Sawtooth</option>
                        <option value="triangle">Triangle</option>
                        <option value="piano">Piano</option>
                        <option value="guitar">Guitarra</option>
                        <option value="pad">Pad Suave</option>
                        <option value="organ">√ìrg√£o</option>
                        <option value="flute">Flauta</option>
                        <option value="violin">Violino</option>
                        <option value="bell">Sino</option>
                        <option value="choir">Coral</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">üîä Volume: <span id="volumeValue">50</span>%</label>
                    <input type="range" class="slider" id="volumeSlider" min="0" max="100" value="50">
                </div>

                <div class="form-group">
                    <label class="form-label">üåä Reverb: <span id="reverbValue">30</span>%</label>
                    <input type="range" class="slider" id="reverbSlider" min="0" max="100" value="30">
                </div>

                <div class="form-group">
                    <label class="form-label">‚ö° Tempo: <span id="tempoValue">120</span> BPM</label>
                    <input type="range" class="slider" id="tempoSlider" min="60" max="200" value="120" step="5">
                </div>

                <div class="form-group">
                    <label class="form-label">üé® Brilho: <span id="brightnessValue">80</span>%</label>
                    <input type="range" class="slider" id="brightnessSlider" min="20" max="100" value="80">
                </div>

                <div class="form-group">
                    <label class="form-label">üåü Densidade de Estrelas: <span id="starDensityValue">300</span></label>
                    <input type="range" class="slider" id="starDensitySlider" min="100" max="800" value="300" step="50">
                </div>
            </div>
        </div>

        <div class="recording-indicator hidden" id="recordingIndicator">
            <div class="card">
                <div style="display: flex; align-items: center; gap: 8px; color: #fca5a5;">
                    <div class="recording-dot"></div>
                    <span style="font-size: 14px; font-weight: 500;">GRAVANDO</span>
                </div>
            </div>
        </div>

        <div class="mouse-glow" id="mouseGlow"></div>

        <div class="instructions">
            <div class="card">
                <h2>üåå Cosmic Symphony Pro üåå</h2>
                <div class="instructions-grid">
                    <div class="instructions-item">
                        <h3>üéµ Controles Musicais</h3>
                        <p>15 escalas ‚Ä¢ 12 instrumentos ‚Ä¢ Grava√ß√£o ‚Ä¢ Replay</p>
                    </div>
                    <div class="instructions-item">
                        <h3>üé® Intera√ß√£o Visual</h3>
                        <p>Clique para criar ‚Ä¢ Mouse atrai ‚Ä¢ Part√≠culas interagem</p>
                    </div>
                    <div class="instructions-item">
                        <h3>üîß Personaliza√ß√£o Total</h3>
                        <p>Volume ‚Ä¢ Reverb ‚Ä¢ Tempo ‚Ä¢ Brilho ‚Ä¢ Densidade</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let gameState = {
            isPlaying: false,
            isRecording: false,
            particles: [],
            stars: [],
            score: 0,
            harmony: 0,
            mousePos: { x: 0, y: 0 },
            currentScale: 'pentatonic',
            currentInstrument: 'sine',
            volume: 50,
            reverb: 30,
            tempo: 120,
            brightness: 80,
            starDensity: 300,
            recordedNotes: [],
            particleId: 0,
            recordingStartTime: 0
        };

        let audioContext = null;
        let masterGain = null;
        let reverbNode = null;

        const scales = {
            pentatonic: [261.63, 293.66, 329.63, 392.0, 440.0],
            major: [261.63, 293.66, 329.63, 349.23, 392.0, 440.0, 493.88],
            minor: [261.63, 293.66, 311.13, 349.23, 392.0, 415.3, 466.16],
            blues: [261.63, 311.13, 349.23, 369.99, 392.0, 466.16],
            chromatic: [261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.0, 415.3, 440.0, 466.16, 493.88],
            dorian: [261.63, 293.66, 311.13, 349.23, 392.0, 440.0, 466.16],
            mixolydian: [261.63, 293.66, 329.63, 349.23, 392.0, 440.0, 466.16],
            harmonic: [261.63, 293.66, 311.13, 349.23, 392.0, 415.3, 493.88],
            japanese: [261.63, 277.18, 349.23, 392.0, 415.3],
            arabic: [261.63, 277.18, 311.13, 349.23, 369.99, 415.3, 466.16],
            indian: [261.63, 277.18, 293.66, 311.13, 349.23, 369.99, 415.3, 440.0, 466.16],
            gypsy: [261.63, 277.18, 311.13, 369.99, 392.0, 415.3, 466.16],
            whole: [261.63, 293.66, 329.63, 369.99, 415.3, 466.16],
            diminished: [261.63, 277.18, 311.13, 329.63, 369.99, 392.0, 440.0, 466.16],
            byzantine: [261.63, 277.18, 311.13, 369.99, 392.0, 415.3, 493.88]
        };

        const scaleColors = {
            pentatonic: ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7"],
            major: ["#FF6B6B", "#FF8E53", "#FF6B9D", "#C44569", "#F8B500", "#6C5CE7", "#A29BFE"],
            minor: ["#2D3436", "#636E72", "#B2BEC3", "#DDD", "#74B9FF", "#0984E3", "#6C5CE7"],
            blues: ["#2C3E50", "#3498DB", "#9B59B6", "#8E44AD", "#2980B9", "#34495E"],
            chromatic: ["#E74C3C", "#E67E22", "#F39C12", "#F1C40F", "#2ECC71", "#1ABC9C", "#3498DB", "#9B59B6", "#8E44AD", "#34495E", "#95A5A6", "#7F8C8D"],
            dorian: ["#FF7675", "#74B9FF", "#81ECEC", "#00B894", "#FDCB6E", "#E17055", "#A29BFE"],
            mixolydian: ["#FD79A8", "#FDCB6E", "#E17055", "#00B894", "#74B9FF", "#6C5CE7", "#A29BFE"],
            harmonic: ["#2D3436", "#636E72", "#DDD", "#E17055", "#00CEC9", "#6C5CE7", "#FD79A8"],
            japanese: ["#FF7675", "#74B9FF", "#00B894", "#FDCB6E", "#A29BFE"],
            arabic: ["#E17055", "#FDCB6E", "#00CEC9", "#74B9FF", "#6C5CE7", "#FD79A8", "#FF7675"],
            indian: ["#FF6B35", "#F7931E", "#FFD23F", "#06FFA5", "#118AB2", "#073B4C", "#8E44AD", "#E74C3C", "#2ECC71"],
            gypsy: ["#8E44AD", "#E74C3C", "#F39C12", "#27AE60", "#3498DB", "#E67E22", "#9B59B6"],
            whole: ["#3498DB", "#E74C3C", "#F39C12", "#27AE60", "#8E44AD", "#E67E22"],
            diminished: ["#2C3E50", "#E74C3C", "#F39C12", "#27AE60", "#3498DB", "#8E44AD", "#E67E22", "#95A5A6"],
            byzantine: ["#8E44AD", "#E74C3C", "#F39C12", "#27AE60", "#3498DB", "#E67E22", "#2ECC71"]
        };

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                masterGain = audioContext.createGain();
                masterGain.connect(audioContext.destination);
                
                // Criar reverb
                reverbNode = audioContext.createConvolver();
                createReverbImpulse();
                reverbNode.connect(masterGain);
            }
        }

        function createReverbImpulse() {
            if (!audioContext || !reverbNode) return;
            
            const length = audioContext.sampleRate * 2;
            const impulse = audioContext.createBuffer(2, length, audioContext.sampleRate);
            
            for (let channel = 0; channel < 2; channel++) {
                const channelData = impulse.getChannelData(channel);
                for (let i = 0; i < length; i++) {
                    channelData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, 2);
                }
            }
            
            reverbNode.buffer = impulse;
        }

        function playNote(frequency, duration = 0.5, instrument = 'sine', velocity = 0.1) {
            if (!audioContext || !masterGain) return;
            
            const now = audioContext.currentTime;
            const noteGain = audioContext.createGain();
            const dryGain = audioContext.createGain();
            const wetGain = audioContext.createGain();
            
            const masterVolume = gameState.volume / 100;
            const reverbAmount = gameState.reverb / 100;
            
            dryGain.gain.setValueAtTime((1 - reverbAmount) * masterVolume, now);
            wetGain.gain.setValueAtTime(reverbAmount * masterVolume, now);
            
            noteGain.connect(dryGain);
            noteGain.connect(wetGain);
            dryGain.connect(masterGain);
            
            if (reverbNode) {
                wetGain.connect(reverbNode);
            }
            
            let oscillator = null;
            
            switch (instrument) {
                case 'piano':
                    // Simula√ß√£o de piano com m√∫ltiplas frequ√™ncias
                    for (let i = 1; i <= 3; i++) {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        
                        osc.frequency.setValueAtTime(frequency * i, now);
                        osc.type = 'sine';
                        
                        gain.gain.setValueAtTime(0, now);
                        gain.gain.linearRampToValueAtTime(velocity / i, now + 0.01);
                        gain.gain.exponentialRampToValueAtTime(0.001, now + duration);
                        
                        osc.connect(gain);
                        gain.connect(noteGain);
                        
                        osc.start(now);
                        osc.stop(now + duration);
                    }
                    break;
                    
                case 'guitar':
                    oscillator = audioContext.createOscillator();
                    const filter = audioContext.createBiquadFilter();
                    
                    oscillator.frequency.setValueAtTime(frequency, now);
                    oscillator.type = 'sawtooth';
                    
                    filter.type = 'lowpass';
                    filter.frequency.setValueAtTime(frequency * 4, now);
                    filter.Q.setValueAtTime(5, now);
                    
                    oscillator.connect(filter);
                    filter.connect(noteGain);
                    break;
                    
                case 'pad':
                    for (let i = 0; i < 3; i++) {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        
                        osc.frequency.setValueAtTime(frequency * (1 + i * 0.01), now);
                        osc.type = 'sine';
                        
                        gain.gain.setValueAtTime(0, now);
                        gain.gain.linearRampToValueAtTime(velocity / 3, now + 0.1);
                        gain.gain.linearRampToValueAtTime(velocity / 6, now + duration * 0.7);
                        gain.gain.exponentialRampToValueAtTime(0.001, now + duration);
                        
                        osc.connect(gain);
                        gain.connect(noteGain);
                        
                        osc.start(now);
                        osc.stop(now + duration);
                    }
                    break;
                    
                case 'organ':
                    for (let i = 1; i <= 4; i++) {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        
                        osc.frequency.setValueAtTime(frequency * i, now);
                        osc.type = 'square';
                        
                        gain.gain.setValueAtTime(velocity / (i * 2), now);
                        gain.gain.exponentialRampToValueAtTime(0.001, now + duration);
                        
                        osc.connect(gain);
                        gain.connect(noteGain);
                        
                        osc.start(now);
                        osc.stop(now + duration);
                    }
                    break;
                    
                case 'flute':
                    oscillator = audioContext.createOscillator();
                    const fluteFilter = audioContext.createBiquadFilter();
                    
                    oscillator.frequency.setValueAtTime(frequency, now);
                    oscillator.type = 'sine';
                    
                    fluteFilter.type = 'highpass';
                    fluteFilter.frequency.setValueAtTime(frequency * 0.8, now);
                    
                    oscillator.connect(fluteFilter);
                    fluteFilter.connect(noteGain);
                    break;
                    
                case 'violin':
                    oscillator = audioContext.createOscillator();
                    const violinFilter = audioContext.createBiquadFilter();
                    
                    oscillator.frequency.setValueAtTime(frequency, now);
                    oscillator.type = 'sawtooth';
                    
                    violinFilter.type = 'bandpass';
                    violinFilter.frequency.setValueAtTime(frequency * 2, now);
                    violinFilter.Q.setValueAtTime(10, now);
                    
                    oscillator.connect(violinFilter);
                    violinFilter.connect(noteGain);
                    break;
                    
                case 'bell':
                    for (let i = 1; i <= 5; i++) {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        
                        osc.frequency.setValueAtTime(frequency * (i * 1.2), now);
                        osc.type = 'sine';
                        
                        gain.gain.setValueAtTime(velocity / (i * 1.5), now);
                        gain.gain.exponentialRampToValueAtTime(0.001, now + duration * (2 - i * 0.2));
                        
                        osc.connect(gain);
                        gain.connect(noteGain);
                        
                        osc.start(now);
                        osc.stop(now + duration * 2);
                    }
                    break;
                    
                case 'choir':
                    for (let i = 0; i < 4; i++) {
                        const osc = audioContext.createOscillator();
                        const gain = audioContext.createGain();
                        
                        osc.frequency.setValueAtTime(frequency * (1 + i * 0.02), now);
                        osc.type = 'triangle';
                        
                        gain.gain.setValueAtTime(0, now);
                        gain.gain.linearRampToValueAtTime(velocity / 4, now + 0.2);
                        gain.gain.linearRampToValueAtTime(velocity / 8, now + duration * 0.8);
                        gain.gain.exponentialRampToValueAtTime(0.001, now + duration);
                        
                        osc.connect(gain);
                        gain.connect(noteGain);
                        
                        osc.start(now);
                        osc.stop(now + duration);
                    }
                    break;
                    
                default:
                    oscillator = audioContext.createOscillator();
                    oscillator.frequency.setValueAtTime(frequency, now);
                    oscillator.type = instrument;
                    oscillator.connect(noteGain);
                    break;
            }
            
            if (oscillator) {
                noteGain.gain.setValueAtTime(0, now);
                noteGain.gain.linearRampToValueAtTime(velocity, now + 0.01);
                noteGain.gain.exponentialRampToValueAtTime(0.001, now + duration);
                
                oscillator.start(now);
                oscillator.stop(now + duration);
            }
        }

        function createParticle(x, y) {
            const currentScaleNotes = scales[gameState.currentScale];
            const noteIndex = Math.floor(Math.random() * currentScaleNotes.length);
            const frequency = currentScaleNotes[noteIndex];
            const colors = scaleColors[gameState.currentScale];
            const velocity = 0.05 + Math.random() * 0.1;
            
            const particle = {
                id: gameState.particleId++,
                x: x,
                y: y,
                vx: (Math.random() - 0.5) * 6,
                vy: (Math.random() - 0.5) * 6,
                size: Math.random() * 12 + 6,
                color: colors[noteIndex % colors.length],
                note: frequency,
                life: 0,
                maxLife: 150 + Math.random() * 100,
                trail: [],
                instrument: gameState.currentInstrument,
                velocity: velocity
            };
            
            playNote(frequency, 0.8, gameState.currentInstrument, velocity);
            gameState.score += Math.floor(velocity * 200);
            
            if (gameState.isRecording) {
                gameState.recordedNotes.push({
                    time: Date.now() - gameState.recordingStartTime,
                    frequency: frequency,
                    instrument: gameState.currentInstrument,
                    x: x,
                    y: y
                });
            }
            
            gameState.particles.push(particle);
            createParticleElement(particle);
            updateStats();
        }

        function createParticleElement(particle) {
            const particleEl = document.createElement('div');
            particleEl.className = 'particle particle-main';
            particleEl.id = `particle-${particle.id}`;
            particleEl.style.left = particle.x + 'px';
            particleEl.style.top = particle.y + 'px';
            particleEl.style.width = particle.size + 'px';
            particleEl.style.height = particle.size + 'px';
            particleEl.style.backgroundColor = particle.color;
            particleEl.style.boxShadow = `0 0 ${particle.size * 3}px ${particle.color}, 0 0 ${particle.size * 6}px ${particle.color}40`;
            particleEl.style.transform = 'translate(-50%, -50%)';
            
            document.getElementById('particlesContainer').appendChild(particleEl);
        }

        function updateParticles() {
            gameState.particles = gameState.particles.filter(particle => {
                const newX = particle.x + particle.vx;
                const newY = particle.y + particle.vy;
                
                particle.trail.push({ x: particle.x, y: particle.y });
                if (particle.trail.length > 15) particle.trail.shift();
                
                let newVx = particle.vx;
                let newVy = particle.vy;
                
                if (newX <= 0 || newX >= window.innerWidth) {
                    newVx = -particle.vx * 0.7;
                    playNote(particle.note, 0.3, particle.instrument, 0.04);
                }
                if (newY <= 0 || newY >= window.innerHeight) {
                    newVy = -particle.vy * 0.7;
                    playNote(particle.note, 0.3, particle.instrument, 0.04);
                }
                
                const dx = gameState.mousePos.x - newX;
                const dy = gameState.mousePos.y - newY;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < 250) {
                    const force = ((250 - distance) / 250) * 0.15;
                    newVx += (dx / distance) * force;
                    newVy += (dy / distance) * force;
                }
                

                gameState.particles.forEach(other => {
                    if (other.id !== particle.id) {
                        const odx = other.x - newX;
                        const ody = other.y - newY;
                        const odist = Math.sqrt(odx * odx + ody * ody);
                        
                        if (odist < 50 && odist > 0) {
                            const repulsion = ((50 - odist) / 50) * 0.05;
                            newVx -= (odx / odist) * repulsion;
                            newVy -= (ody / odist) * repulsion;
                            
                            if (Math.random() < 0.01) {
                                playNote(particle.note, 0.2, particle.instrument, 0.02);
                                playNote(other.note, 0.2, other.instrument, 0.02);
                            }
                        }
                    }
                });
                
                const friction = 0.995 - gameState.tempo / 10000;
                newVx *= friction;
                newVy *= friction;
                
                // Atualizar posi√ß√£o
                particle.x = Math.max(0, Math.min(window.innerWidth, newX));
                particle.y = Math.max(0, Math.min(window.innerHeight, newY));
                particle.vx = newVx;
                particle.vy = newVy;
                particle.life++;
                
                const particleEl = document.getElementById(`particle-${particle.id}`);
                if (particleEl) {
                    particleEl.style.left = particle.x + 'px';
                    particleEl.style.top = particle.y + 'px';
                    particleEl.style.opacity = 1 - particle.life / particle.maxLife;
                    
                    const existingTrails = particleEl.querySelectorAll('.trail-point');
                    existingTrails.forEach(trail => trail.remove());
                    
                    particle.trail.forEach((point, index) => {
                        const trailEl = document.createElement('div');
                        trailEl.className = 'trail-point';
                        trailEl.style.left = point.x + 'px';
                        trailEl.style.top = point.y + 'px';
                        trailEl.style.width = (particle.size * (index / particle.trail.length) * 0.8) + 'px';
                        trailEl.style.height = (particle.size * (index / particle.trail.length) * 0.8) + 'px';
                        trailEl.style.backgroundColor = particle.color;
                        trailEl.style.opacity = (index / particle.trail.length) * 0.4;
                        trailEl.style.transform = 'translate(-50%, -50%)';
                        particleEl.appendChild(trailEl);
                    });
                }
                
                if (particle.life >= particle.maxLife) {
                    if (particleEl) particleEl.remove();
                    return false;
                }
                
                return true;
            });
        }

        function initStars() {
            const starsContainer = document.getElementById('starsContainer');
            starsContainer.innerHTML = '';
            gameState.stars = [];
            
            for (let i = 0; i < gameState.starDensity; i++) {
                const star = {
                    x: Math.random() * window.innerWidth,
                    y: Math.random() * window.innerHeight,
                    size: Math.random() * 3 + 0.5,
                    opacity: Math.random() * 0.8 + 0.2,
                    twinkle: Math.random() * Math.PI * 2
                };
                
                const starEl = document.createElement('div');
                starEl.className = 'star';
                starEl.style.left = star.x + 'px';
                starEl.style.top = star.y + 'px';
                starEl.style.width = star.size + 'px';
                starEl.style.height = star.size + 'px';
                starEl.style.opacity = star.opacity;
                starEl.style.boxShadow = `0 0 ${star.size * 2}px rgba(255,255,255,${star.opacity})`;
                
                starsContainer.appendChild(starEl);
                gameState.stars.push({ ...star, element: starEl });
            }
        }

        function updateStars() {
            gameState.stars.forEach(star => {
                star.twinkle += 0.03;
                star.opacity = 0.2 + Math.sin(star.twinkle) * 0.4;
                star.element.style.opacity = star.opacity;
            });
        }

        function updateStats() {
            document.getElementById('scoreValue').textContent = gameState.score;
            document.getElementById('particlesValue').textContent = gameState.particles.length;
            document.getElementById('recordedValue').textContent = gameState.recordedNotes.length;
            
            const activeNotes = gameState.particles.map(p => p.note);
            const uniqueNotes = [...new Set(activeNotes)];
            const harmonyScore = Math.min(uniqueNotes.length * 15 + gameState.particles.length * 2, 100);
            gameState.harmony = harmonyScore;
            document.getElementById('harmonyValue').textContent = harmonyScore;
        }

        function animate() {
            if (!gameState.isPlaying) return;
            
            updateParticles();
            updateStars();
            updateStats();
            
            requestAnimationFrame(animate);
        }

        function playRecording() {
            if (gameState.recordedNotes.length === 0) return;
            
            gameState.recordedNotes.forEach(note => {
                setTimeout(() => {
                    playNote(note.frequency, 0.8, note.instrument, 0.08);
                    createParticle(note.x, note.y);
                }, note.time);
            });
        }

        document.getElementById('gameContainer').addEventListener('mousemove', (e) => {
            gameState.mousePos = { x: e.clientX, y: e.clientY };
            
            const mouseGlow = document.getElementById('mouseGlow');
            const colors = scaleColors[gameState.currentScale];
            mouseGlow.style.left = (e.clientX - 75) + 'px';
            mouseGlow.style.top = (e.clientY - 75) + 'px';
            mouseGlow.style.background = `radial-gradient(circle, ${colors[0]}40, ${colors[1]}20, transparent)`;
            mouseGlow.style.opacity = gameState.isPlaying ? (gameState.brightness / 100) : 0;
        });

        document.getElementById('gameContainer').addEventListener('click', (e) => {
            if (!gameState.isPlaying) return;
            createParticle(e.clientX, e.clientY);
        });

        document.getElementById('playBtn').addEventListener('click', () => {
            if (!gameState.isPlaying) {
                initAudio();
                gameState.isPlaying = true;
                document.getElementById('playIcon').textContent = '‚è∏Ô∏è';
                animate();
            } else {
                gameState.isPlaying = false;
                document.getElementById('playIcon').textContent = '‚ñ∂Ô∏è';
            }
        });

        document.getElementById('recordBtn').addEventListener('click', () => {
            if (!gameState.isRecording) {
                gameState.recordingStartTime = Date.now();
                gameState.recordedNotes = [];
                gameState.isRecording = true;
                document.getElementById('recordBtn').className = 'button button-destructive';
                document.getElementById('recordingIndicator').classList.remove('hidden');
            } else {
                gameState.isRecording = false;
                document.getElementById('recordBtn').className = 'button button-outline';
                document.getElementById('recordingIndicator').classList.add('hidden');
            }
            updateStats();
        });

        document.getElementById('replayBtn').addEventListener('click', playRecording);

        document.getElementById('resetBtn').addEventListener('click', () => {
            gameState.isPlaying = false;
            gameState.isRecording = false;
            gameState.particles = [];
            gameState.score = 0;
            gameState.harmony = 0;
            gameState.recordedNotes = [];
            
            document.getElementById('playIcon').textContent = '‚ñ∂Ô∏è';
            document.getElementById('recordBtn').className = 'button button-outline';
            document.getElementById('recordingIndicator').classList.add('hidden');
            document.getElementById('particlesContainer').innerHTML = '';
            
            updateStats();
        });

        document.getElementById('settingsBtn').addEventListener('click', () => {
            const panel = document.getElementById('settingsPanel');
            panel.classList.toggle('show');
        });

        // Controles de configura√ß√£o
        document.getElementById('scaleSelect').addEventListener('change', (e) => {
            gameState.currentScale = e.target.value;
        });

        document.getElementById('instrumentSelect').addEventListener('change', (e) => {
            gameState.currentInstrument = e.target.value;
        });

        document.getElementById('volumeSlider').addEventListener('input', (e) => {
            gameState.volume = parseInt(e.target.value);
            document.getElementById('volumeValue').textContent = gameState.volume;
            if (masterGain) {
                masterGain.gain.setValueAtTime(gameState.volume / 100, audioContext?.currentTime || 0);
            }
        });

        document.getElementById('reverbSlider').addEventListener('input', (e) => {
            gameState.reverb = parseInt(e.target.value);
            document.getElementById('reverbValue').textContent = gameState.reverb;
        });

        document.getElementById('tempoSlider').addEventListener('input', (e) => {
            gameState.tempo = parseInt(e.target.value);
            document.getElementById('tempoValue').textContent = gameState.tempo;
        });

        document.getElementById('brightnessSlider').addEventListener('input', (e) => {
            gameState.brightness = parseInt(e.target.value);
            document.getElementById('brightnessValue').textContent = gameState.brightness;
        });

        document.getElementById('starDensitySlider').addEventListener('input', (e) => {
            gameState.starDensity = parseInt(e.target.value);
            document.getElementById('starDensityValue').textContent = gameState.starDensity;
            initStars();
        });

        setInterval(() => {
            document.getElementById('replayBtn').disabled = gameState.recordedNotes.length === 0;
        }, 100);

        initStars();
        updateStats();

        window.addEventListener('resize', () => {
            initStars();
        });
    </script>
</body>
</html>
